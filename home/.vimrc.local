function Rand()
    return str2nr(matchstr(reltimestr(reltime()), '\v\.@<=\d+')[1:])
endfunction

if has("gui_running")
    " high contrast color schemes
    let colors = ['candycode', 'desertink', 'flattr', 'fruity', 'fu', 'herald', 'hornet']

    " choose a random value from the high contrast array
    let color_ = colors[Rand() % (len(colors))]
    exec 'color '.color_
else
    color evening
endif

" wrap lines
set wrap

" use the following in order to be able to use move to top and bottom
" of the screen
let g:spf13_no_fastTabs = 1

" only spell if in gvim, otherwise it looks weird
if !has("gui_running")
    set nospell
endif

" This tests to see if vim was configured with the '--enable-cscope' option
" when it was compiled.  If it wasn't, time to recompile vim...
if has("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check ctags for definition of a symbol before checking cscope
    set csto=1

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add the database pointed to by environment variable
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose

    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).
    "
    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.
    "

    nmap <C-\>a :cs find a <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i <C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

    " Using CTRL-@ then a search type makes the vim window split vertically
    " (vim 6 and up only), with search result displayed in the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>

    nmap <C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

    " Hitting CTRL-@ *twice* before the search type does a horizontal
    " split instead of a vertical one

    nmap <C-@><C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@><C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@><C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100
endif

" Most prefer to automatically switch to the current file directory when
" a new buffer is opened; to prevent this behavior, add the following to
" your .vimrc.before.local file:
let g:spf13_no_autochdir = 1

" disable views because it always enables spelling
let g:spf13_no_views = 1

" It's so frustrating to modify a file and then realize you don't have sudo...
cmap w!! %!sudo tee > /dev/null %

" youcompleteme: don't automatically trigger suggestions
let g:ycm_auto_trigger = 1

" show the current function declaration in the status bar when hitting \ + F
function! ShowFuncName()
    let lnum = line(".")
    let col = col(".")
    echohl ModeMsg
    echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
    echohl None
    call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
:nnoremap <Leader>F :call ShowFuncName()<CR>

" map Space or z+Space to open the tag of the symbol in a vertical or
" horizontal split
nmap <Space> :vert stag <C-R>=expand("<cword>")<CR><CR>
nmap z<Space> :stag <C-R>=expand("<cword>")<CR><CR>

" press \ + r to replace word
":nnoremap <Leader>r :%s/\<<C-r><C-w>\>/

" function for expanding function call on multiple lines
" @param[in] single_func_call If set to != 0, specifies if there is
"                             a single function call on that line
function ExpandParams(single_func_call)
    let l:commas = len(split(getline("."), ',', 1)) - 1

    if a:single_func_call != 0
        normal! 0
    endif

    " go to the first parameter and remember its position
    normal! f(
    let l:start_param_pos = col('.') + 1

    let l:i = 0
    while l:i < l:commas
        " add newline after ,
        execute "normal! f,a\n"

        let l:crt_param_pos = col('.')
        let l:diff = l:crt_param_pos - l:start_param_pos + 1

        " cut or add white space
        if l:diff > 0
            " move cursor to position of 1st parameter
            call cursor(0, l:start_param_pos)
            " remove white spaces
            execute "normal! ".l:diff."x"
        elseif l:diff < 0
            " add white spaces
            let l:diff = l:diff * (-1)
            execute "normal! yh".l:diff."p"
        endif

        let l:i += 1
    endwhile
endfun
:nnoremap <Leader>E :call ExpandParams(1)<CR>
:nnoremap <Leader><Leader>E :call ExpandParams(0)<CR>

" show warning/error when going on a too big width
":au BufWinEnter * let w:m1=matchadd('Search', '\%<90v.\%>94v', -1)
":au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>93v.\+', -1)
function ShowLineMargin()
    :match Search '\%<90v.\%>94v'
    :match ErrorMsg '\%>93v.\+'
endfunction
function HideLineMargin()
    :match none
endfunction
:nnoremap <Leader>M :call HideLineMargin()<CR>
:nnoremap <Leader><Leader>M :call ShowLineMargin()<CR>

function DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction

function ReverseCondition(condition)
    if a:condition == "==" || a:condition == "!="
        return a:condition
    elseif a:condition == ">"
        return "<"
    elseif a:condition == "<"
        return ">"
    elseif a:condition == ">="
        return "<="
    elseif a:condition == "<="
        return ">="
    endif
endfunction

" function for reversing yoda conditionals
function! ReverseYoda()
    let l:line = getline(".")

    let l:constant = expand("<cword>")

    " skip spaces
    let l:index = col(".") + strlen(l:constant) - 1
    while l:line[l:index : l:index] == " "
        let l:index += 1
    endwhile

    " get comparison character - the length is the index of where the first
    " alphanumerical character or space begins
    let l:comparison_len = match(l:line[l:index : ], "[\a ]")
    let l:comparison = l:line[l:index : l:index + l:comparison_len - 1]

    " skip spaces
    let l:index = l:index + l:comparison_len
    while l:line[l:index : l:index] == " "
        let l:index += 1
    endwhile

    " get expresion to check
    let l:expr_len = match(l:line[l:index : ], "[ )]")
    let l:expr = l:line[l:index : l:index + l:expr_len - 1]
    let l:index = l:index + strlen(l:expr)

    " compose final expresion and replace the line
    let l:reverse_comparison = ReverseCondition(l:comparison)
    let l:newline = l:line[0 : col(".") - 2].l:expr." ".ReverseCondition(l:comparison)." ".l:constant.l:line[l:index : ]
    call setline('.', l:newline)
endfun
:nnoremap <Leader>y :call ReverseYoda()<CR>

" rtags completion integration with neocomplete
let g:neocomplete#enable_at_startup = 1
function! SetupNeocompleteForCppWithRtags()
    " Enable heavy omni completion.
    setlocal omnifunc=RtagsCompleteFunc

    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let l:cpp_patterns='[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.cpp = l:cpp_patterns
    set completeopt+=longest,menuone
endfunction
autocmd FileType cpp,c call SetupNeocompleteForCppWithRtags()
